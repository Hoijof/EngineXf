import Head from 'next/head'

import { useEffect, useRef } from 'react'
import { gk } from '../consts';

import {init, step, resize, mouseUpdate, addKeyUp, addKeyDown, addEntity, clearEntities} from '../engine/index';
import { Transform } from '../engine/Transform';
import { getRandomFloat } from '../utils';
import { TestEntity1 } from './../domain/TestEntity1';

let singletoned = false;

export default function Home() {
  const canvasRef = useRef(null);

  useEffect(() => {
    if (singletoned) {
      return;
    }

    singletoned = true;

    const render = () => {
      step();

      requestAnimationFrame(render);
    }

    document.addEventListener('mousemove', (e) => {
      const canvas = canvasRef.current as unknown as HTMLCanvasElement;

      const x = e.clientX - canvas.offsetLeft;
      const y = e.clientY - canvas.offsetTop;

      mouseUpdate({ x, y });
    });

    document.addEventListener('mousedown', (e) => {
      mouseUpdate({down: true, up: false, pressed: true });

      e.preventDefault();
    });

    document.addEventListener('mouseup', (e) => {
      mouseUpdate({down: false, up: true, released: true });

      e.preventDefault();
    });

    document.addEventListener('mousewheel', (e) => {
      mouseUpdate({wheel: (e as any).deltaY });
    });

    document.addEventListener('keyup', (e) => {
      addKeyUp(e.key);
    });

    document.addEventListener('keydown', (e) => {
      if (gk('DEBUG')) {
        console.log(e.key);
      }
      
      addKeyDown(e.key);
    });

    // #endregion
    // Setup engine

    init(canvasRef.current as unknown as HTMLCanvasElement, (engine) => {

      if (engine.keyboard.pressed.has(' ')) {
        console.log('space pressed');

        addRandomEntity();
      }

      if (engine.keyboard.pressed.has('ArrowDown')) {
        addRandomEntityTimes(20)();
      }

      if (engine.keyboard.pressed.has('r')) {
        clearEntities();
      }

      if (engine.mouse.pressed) {
        addRandomEntity({position: new DOMPoint(engine.mouse.x, engine.mouse.y)});
      }

      const { endedTouches } = engine.touch;

      if (endedTouches.length) {
        for (const touch of endedTouches) {
          addRandomEntity({position: new DOMPoint(touch.x, touch.y)});
        }
      }
    });

    render();
    // setup game?


    // addEntity(new TestEntity1({ name: 'Manolo', transform: {position: new DOMPoint(150, 300), scale: new DOMPoint(100, 200)}, physicsComponent: {speed: new DOMPoint(-50, 0)}}));
    // addEntity(new TestEntity1({ name: 'Manolo', transform: {position: new DOMPoint(120, 300), scale: new DOMPoint(200, 200)}, physicsComponent: {speed: new DOMPoint(50, 0)}}));
  });

  const addRandomEntity = (transform: Partial<Transform> | any = {}) => {
    const x = Math.random() * window.innerWidth;
    const y = Math.random() * window.innerHeight;

    const position = new DOMPoint(x, y);
    const speed = new DOMPoint(getRandomFloat(-50, 50), getRandomFloat(-50, 50));
    const scale = new DOMPoint(getRandomFloat(8, 25), getRandomFloat(8, 25));

    addEntity(new TestEntity1({name: 'manolo', transform: {position, scale, ...transform}, physicsComponent: {speed}}));
  }

  const addRandomEntityTimes = (times: number) => {
    return () => {
      for (let i = 0; i < times; i++) {
        addRandomEntity();
      }
    }
  }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
        <canvas id='canvas' ref={canvasRef} />
        <div style={{position: "fixed", top: 0, left: 0, zIndex: 1000}}>
          <button onClick={addRandomEntity}>Add entity</button>
          <button onClick={addRandomEntityTimes(10)}>Add entity x10</button>
          <button onClick={addRandomEntityTimes(100)}>Add entity x100</button>
          <button onClick={addRandomEntityTimes(1000)}>Add entity x1000</button>
        </div>
      </main>
    </>
  )
}



