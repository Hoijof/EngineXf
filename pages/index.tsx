import Head from 'next/head'

import { useEffect, useRef } from 'react'

import {init, step, resize, mouseUpdate, addKeyUp, addKeyDown, addEntity} from '../engine/index';
import { Engine } from '../types';
import { TestEntity1 } from './../domain/TestEntity1';

let singletoned = false;

export default function Home() {
  const canvasRef = useRef(null);

  useEffect(() => {
    if (singletoned) {
      return;
    }

    singletoned = true;

    const render = () => {
      step();

      requestAnimationFrame(render);
    }

    // #region Setup events
    document.addEventListener('resize', () => {
      const canvas = canvasRef.current as unknown as HTMLCanvasElement;

      resize(canvas.width, canvas.height);
    });

    document.addEventListener('mousemove', (e) => {
      const canvas = canvasRef.current as unknown as HTMLCanvasElement;

      const x = e.clientX - canvas.offsetLeft;
      const y = e.clientY - canvas.offsetTop;

      mouseUpdate({ x, y });
    });

    document.addEventListener('mousedown', (e) => {
      mouseUpdate({down: true, up: false, pressed: true });

      e.preventDefault();
    });

    document.addEventListener('mouseup', (e) => {
      mouseUpdate({down: false, up: true, released: true });

      e.preventDefault();
    });

    document.addEventListener('mousewheel', (e) => {
      mouseUpdate({wheel: (e as any).deltaY });
    });

    document.addEventListener('keyup', (e) => {
      addKeyUp(e.key);
    });

    document.addEventListener('keydown', (e) => {
      addKeyDown(e.key);
    });

    // #endregion
    // Setup engine

    init(canvasRef.current as unknown as HTMLCanvasElement);

    render();
    // setup game?


    addEntity(new TestEntity1({ name: 'Manolo'}));
  });

  const addRandomEntity = () => {
    const x = Math.random() * 1000;
    const y = Math.random() * 1000;

    const position = new DOMPoint(x, y);
    const speed = new DOMPoint(getRandomFloat(-50, 50), getRandomFloat(-50, 50));
    addEntity(new TestEntity1({name: 'manolo', transform: {position}, physicsComponent: {speed}}));
  }

  const addRandomEntityTimes = (times: number) => {
    return () => {
      for (let i = 0; i < times; i++) {
        addRandomEntity();
      }
    }
  }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
        <div >
          <canvas id='mainCanvas' ref={canvasRef} />
        </div>
        <div style={{position: "fixed", top: 0, left: 0, zIndex: 1000}}>
          <button onClick={addRandomEntity}>Add entity</button>
          <button onClick={addRandomEntityTimes(10)}>Add entity x10</button>
          <button onClick={addRandomEntityTimes(100)}>Add entity x100</button>
          <button onClick={addRandomEntityTimes(1000)}>Add entity x1000</button>
        </div>
      </main>
    </>
  )
}


// Get random float between min and max
export const getRandomFloat = (min: number, max: number) => {
  return Math.random() * (max - min) + min;
}
